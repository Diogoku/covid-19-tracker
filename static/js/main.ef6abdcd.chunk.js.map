{"version":3,"sources":["features/countries/countriesSlice.js","axios.js","components/SelectCountry.js","components/Header.js","components/InfoBox.js","utils/index.js","components/TableCountries.js","components/CovidMap.js","components/CovidGraph.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["countriesSlice","createSlice","name","initialState","countries","currentCountryInfo","country","code","currentInfoBoxType","reducers","setCountries","state","action","payload","setCurrentCountryInfo","setCurrentInfoBoxType","actions","selectCountries","selectCurrentCountryInfo","selectCurrentInfoBoxType","instance","axios","create","baseURL","SelectCountry","dispatch","useDispatch","useSelector","useEffect","a","get","then","data","map","value","countryInfo","iso2","id","_id","cases","recovered","deaths","catch","err","console","log","getCountriesData","FormControl","variant","Select","displayEmpty","inputProps","onChange","e","countryCode","target","todayCases","todayDeaths","todayRecovered","tests","lat","lng","long","flag","MenuItem","index","key","Header","className","InfoBox","title","total","type","infoBoxType","Card","CardActionArea","onClick","CardContent","Typography","color","numeral","parseInt","format","casesTypeColor","hex","multiplier","sortNumberCases","b","showDataOnGraph","last30DaysRecords","Object","keys","forEach","push","day","TableCountries","Paper","elevation","component","TableContainer","Table","size","aria-label","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","filter","sort","scope","CovidMap","useState","center","setCenter","mapZoom","setMapZoom","casesType","Map","zoom","TileLayer","url","attribution","Circle","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","showDataOnMap","CovidGraph","Countrylast30DaysRecords","setCountryLast30DaysRecords","timeline","fetchCountryLast30DaysRecords","width","height","margin","top","right","left","bottom","dataKey","stroke","App","fetchDefaultCountryInfo","configureStore","reducer","countriesReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef6abdcd.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const countriesSlice = createSlice({\r\n  name: \"countries\",\r\n  initialState: {\r\n    countries: [],\r\n    currentCountryInfo: { country: \"Worldwide\", code: \"Worldwide\" },\r\n    currentInfoBoxType: \"cases\",\r\n  },\r\n  reducers: {\r\n    setCountries: (state, action) => {\r\n      state.countries = action.payload;\r\n    },\r\n    setCurrentCountryInfo: (state, action) => {\r\n      state.currentCountryInfo = action.payload;\r\n    },\r\n    setCurrentInfoBoxType: (state, action) => {\r\n      state.currentInfoBoxType = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// actions\r\nexport const {\r\n  setCountries,\r\n  setCurrentCountryInfo,\r\n  setCurrentInfoBoxType,\r\n} = countriesSlice.actions;\r\n\r\n// selectors\r\nexport const selectCountries = (state) => state.countries.countries;\r\nexport const selectCurrentCountryInfo = (state) =>\r\n  state.countries.currentCountryInfo;\r\nexport const selectCurrentInfoBoxType = (state) =>\r\n  state.countries.currentInfoBoxType;\r\n\r\nexport default countriesSlice.reducer;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://disease.sh/v3/covid-19\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useEffect } from \"react\";\r\n\r\n// REACT-REDUX\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectCountries,\r\n  selectCurrentCountryInfo,\r\n  setCurrentCountryInfo,\r\n  setCountries,\r\n} from \"../features/countries/countriesSlice\";\r\n\r\n// AXIOS\r\nimport axios from \"../axios\";\r\n\r\n// MATERIAL-UI\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n// CSS\r\nimport \"../css/selectCountry.css\";\r\n\r\nfunction SelectCountry() {\r\n  const dispatch = useDispatch();\r\n  const countries = useSelector(selectCountries);\r\n  const currentCountryInfo = useSelector(selectCurrentCountryInfo);\r\n\r\n  // Fetch all the countries\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      await axios\r\n        .get(`/countries/`)\r\n        .then(({ data }) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n            id: country.countryInfo._id,\r\n            cases: country.cases,\r\n            recovered: country.recovered,\r\n            deaths: country.deaths,\r\n            countryInfo: country.countryInfo,\r\n          }));\r\n          dispatch(setCountries(countries));\r\n        })\r\n        .catch((err) => console.log(err));\r\n    };\r\n\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  const onCountryChange = (e) => {\r\n    const countryCode = e.target.value;\r\n\r\n    axios\r\n      .get(\r\n        `${\r\n          countryCode === \"Worldwide\"\r\n            ? \"/all\"\r\n            : `/countries/${countryCode}?strict=true`\r\n        }`\r\n      )\r\n      .then(({ data }) =>\r\n        dispatch(\r\n          setCurrentCountryInfo({\r\n            country: countryCode === \"Worldwide\" ? \"Worldwide\" : data.country,\r\n            code: countryCode,\r\n            cases: data.cases,\r\n            todayCases: data.todayCases,\r\n            deaths: data.deaths,\r\n            todayDeaths: data.todayDeaths,\r\n            recovered: data.recovered,\r\n            todayRecovered: data.todayRecovered,\r\n            tests: data.tests,\r\n            lat: countryCode === \"Worldwide\" ? null : data.countryInfo.lat,\r\n            lng: countryCode === \"Worldwide\" ? null : data.countryInfo.long,\r\n            flag: countryCode === \"Worldwide\" ? null : data.countryInfo.flag,\r\n          })\r\n        )\r\n      )\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  return (\r\n    <FormControl variant=\"outlined\">\r\n      <Select\r\n        value={currentCountryInfo.code}\r\n        displayEmpty\r\n        inputProps={{ \"aria-label\": \"Without label\" }}\r\n        onChange={onCountryChange}\r\n      >\r\n        <MenuItem value=\"Worldwide\">WorldWide</MenuItem>\r\n        {countries.map((country, index) => (\r\n          <MenuItem value={country.value} key={index}>\r\n            {country.name}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default SelectCountry;\r\n","import React from \"react\";\r\n\r\n// COMPONENTS\r\nimport SelectCountry from \"./SelectCountry\";\r\n\r\n// MATERIAL-UI\r\n\r\n// CSS\r\nimport \"../css/header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h2>Covid-19 Tracker</h2>\r\n      <SelectCountry />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\n// REACT-REDUX\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectCurrentInfoBoxType,\r\n  setCurrentInfoBoxType,\r\n} from \"../features/countries/countriesSlice\";\r\n\r\n// NUMERAL\r\nimport numeral from \"numeral\";\r\n\r\n// MATERIAL-UI\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n// CSS\r\nimport \"../css/infoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, type }) {\r\n  const dispatch = useDispatch();\r\n  const infoBoxType = useSelector(selectCurrentInfoBoxType);\r\n\r\n  const onChangeInfoBoxType = () => {\r\n    dispatch(setCurrentInfoBoxType(type));\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardActionArea onClick={onChangeInfoBoxType}>\r\n        <div\r\n          className={`infoBox__selected ${type === infoBoxType ? type : null}`}\r\n        ></div>\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\">{title}</Typography>\r\n          <Typography\r\n            variant=\"h4\"\r\n            className={`${type === infoBoxType ? `${type}__text` : null}`}\r\n          >\r\n            {cases > 0 ? numeral(parseInt(cases)).format(\"+0.0a\") : cases}\r\n          </Typography>\r\n          <Typography color=\"textSecondary\">\r\n            {total > 0 ? numeral(parseInt(total)).format(\"+0.0a\") : total}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup, Tooltip } from \"react-leaflet\";\r\n\r\nconst casesTypeColor = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 400,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 600,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 500,\r\n  },\r\n};\r\n\r\nexport const sortNumberCases = (a, b) => {\r\n  if (a.cases < b.cases) return 1;\r\n  if (a.cases > b.cases) return -1;\r\n  return 0;\r\n};\r\n\r\n// draw circles on the map with interactive tooltip\r\nexport const showDataOnMap = (countries, casesType = \"recovered\") =>\r\n  countries.map((country, index) => (\r\n    <Circle\r\n      key={index}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColor[casesType].hex}\r\n      fillColor={casesTypeColor[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColor[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info__container\">\r\n          <div\r\n            className=\"info__flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info__name\">{country.name}</div>\r\n          <div className=\"info__cases\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info__recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info__deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\n// convert api data to covid graph data\r\nexport const showDataOnGraph = (last30DaysRecords) => {\r\n  let data = [];\r\n  Object.keys(last30DaysRecords.cases).forEach((key) => {\r\n    data.push({\r\n      day: key,\r\n      cases: last30DaysRecords.cases[key],\r\n      recovered: last30DaysRecords.recovered[key],\r\n      deaths: last30DaysRecords.deaths[key],\r\n    });\r\n  });\r\n\r\n  return data;\r\n};\r\n","import React from \"react\";\r\n\r\n// REACT-REDUX\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectCountries } from \"../features/countries/countriesSlice\";\r\n\r\n// MATERIAL-UI\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n// UTILS\r\nimport { sortNumberCases } from \"../utils\";\r\n\r\n// CSS\r\nimport \"../css/tableCountries.css\";\r\n\r\nfunction TableCountries() {\r\n  const countries = useSelector(selectCountries);\r\n\r\n  return (\r\n    <div className=\"tableCountries\">\r\n      <Paper elevation={1}>\r\n        <Typography variant=\"h5\" component=\"h4\" color=\"textSecondary\">\r\n          Live Cases By Country\r\n        </Typography>\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className=\"tableCountries\"\r\n            size=\"small\"\r\n            aria-label=\"a dense table\"\r\n            stickyHeader={true}\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Country</TableCell>\r\n                <TableCell align=\"right\">Cases</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {countries\r\n                .filter((country) => country.cases != null)\r\n                .sort(sortNumberCases)\r\n                .map((country) => (\r\n                  <TableRow key={country.name}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {country.name}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{country.cases}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableCountries;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n// REACT-REDUX\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  selectCurrentCountryInfo,\r\n  selectCountries,\r\n  selectCurrentInfoBoxType,\r\n} from \"../features/countries/countriesSlice\";\r\n\r\n// REACT-LEAFLET\r\nimport { Map, TileLayer } from \"react-leaflet\";\r\n\r\n// UTILS\r\nimport { showDataOnMap } from \"../utils\";\r\n\r\n// CSS\r\nimport \"../css/covidMap.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nfunction CovidMap() {\r\n  const [center, setCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const currentCountryInfo = useSelector(selectCurrentCountryInfo);\r\n  const countries = useSelector(selectCountries);\r\n  const casesType = useSelector(selectCurrentInfoBoxType);\r\n\r\n  useEffect(() => {\r\n    if (currentCountryInfo.country === \"Worldwide\") {\r\n      setCenter({ lat: 34.80746, lng: -40.4796 });\r\n      setMapZoom(3);\r\n    } else {\r\n      setCenter({ lat: currentCountryInfo.lat, lng: currentCountryInfo.lng });\r\n      setMapZoom(4);\r\n    }\r\n  }, [currentCountryInfo]);\r\n\r\n  return (\r\n    <div className=\"covidMap\">\r\n      <Map center={center} zoom={mapZoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </Map>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CovidMap;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\n// REACT-REDUX\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  selectCurrentCountryInfo,\r\n  selectCurrentInfoBoxType,\r\n} from \"../features/countries/countriesSlice\";\r\n\r\n// RECHARTS\r\nimport {\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\n// AXIOS\r\nimport axios from \"../axios\";\r\n\r\n// UTILS\r\nimport { showDataOnGraph } from \"../utils\";\r\n\r\n// CSS\r\nimport \"../css/covidGraph.css\";\r\n\r\nfunction CovidGraph() {\r\n  const currentCountryInfo = useSelector(selectCurrentCountryInfo);\r\n  const currentInfoBoxType = useSelector(selectCurrentInfoBoxType);\r\n  const [Countrylast30DaysRecords, setCountryLast30DaysRecords] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCountryLast30DaysRecords = async () => {\r\n      const { data } = await axios.get(\r\n        `/historical${\r\n          currentCountryInfo.country === \"Worldwide\"\r\n            ? \"/all\"\r\n            : `/${currentCountryInfo.country}`\r\n        }?lastdays=30`\r\n      );\r\n      setCountryLast30DaysRecords(\r\n        showDataOnGraph(\r\n          currentCountryInfo.country === \"Worldwide\" ? data : data.timeline\r\n        )\r\n      );\r\n    };\r\n\r\n    fetchCountryLast30DaysRecords();\r\n  }, [currentCountryInfo]);\r\n\r\n  const stokeCasesType = {\r\n    cases: \"#ff0000\",\r\n    recovered: \"#49fc31\",\r\n    deaths: \"#910000\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"covidGraph\">\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <LineChart\r\n          data={Countrylast30DaysRecords}\r\n          margin={{ top: 20, right: 40, left: 40, bottom: 0 }}\r\n        >\r\n          <XAxis dataKey=\"day\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey={currentInfoBoxType}\r\n            stroke={stokeCasesType[currentInfoBoxType]}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CovidGraph;\r\n","import React, { useEffect } from \"react\";\r\n\r\n// REACT-REDUX\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  setCurrentCountryInfo,\r\n  selectCurrentCountryInfo,\r\n} from \"./features/countries/countriesSlice\";\r\n\r\n// AXIOS\r\nimport axios from \"./axios\";\r\n\r\n// COMPONENTS\r\nimport Header from \"./components/Header\";\r\nimport InfoBox from \"./components/InfoBox\";\r\nimport TableCountries from \"./components/TableCountries\";\r\nimport CovidMap from \"./components/CovidMap\";\r\nimport CovidGraph from \"./components/CovidGraph\";\r\n\r\n// CSS\r\nimport \"./css/App.css\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const currentCountryInfo = useSelector(selectCurrentCountryInfo);\r\n\r\n  useEffect(() => {\r\n    const fetchDefaultCountryInfo = async () => {\r\n      await axios\r\n        .get(\"/all\")\r\n        .then(({ data }) =>\r\n          dispatch(\r\n            setCurrentCountryInfo({\r\n              country: \"Worldwide\",\r\n              code: \"Worldwide\",\r\n              cases: data.cases,\r\n              todayCases: data.todayCases,\r\n              deaths: data.deaths,\r\n              todayDeaths: data.todayDeaths,\r\n              recovered: data.recovered,\r\n              todayRecovered: data.todayRecovered,\r\n              tests: data.tests,\r\n            })\r\n          )\r\n        )\r\n        .catch((err) => console.log(err));\r\n    };\r\n\r\n    fetchDefaultCountryInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"app__leftSide\">\r\n        <Header />\r\n        <div className=\"app__infoBoxes\">\r\n          <InfoBox\r\n            title={\"Corona Virus Cases\"}\r\n            cases={currentCountryInfo.todayCases}\r\n            total={currentCountryInfo.cases}\r\n            type={\"cases\"}\r\n          />\r\n          <InfoBox\r\n            title={\"Recovered\"}\r\n            cases={currentCountryInfo.todayRecovered}\r\n            total={currentCountryInfo.recovered}\r\n            type={\"recovered\"}\r\n          />\r\n          <InfoBox\r\n            title={\"Deaths\"}\r\n            cases={currentCountryInfo.todayDeaths}\r\n            total={currentCountryInfo.deaths}\r\n            type={\"deaths\"}\r\n          />\r\n        </div>\r\n        <CovidMap />\r\n        <CovidGraph />\r\n      </div>\r\n      <div className=\"app__rightSide\">\r\n        <TableCountries />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport countriesReducer from \"../features/countries/countriesSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    countries: countriesReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./css/index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}